      ! Store routines for DTYPE
         SUBROUTINE make_type_DTYPE(type_ptr, dtype_id)
               IMPLICIT NONE
               TYPE(DTYPE), DIMENSION(:), INTENT(IN) :: type_ptr
               INTEGER(HID_T), INTENT(OUT) :: dtype_id
               INTEGER(HID_T) :: string_id
               INTEGER(HSIZE_T), DIMENSION(1) :: dims
               INTEGER rank
               INTEGER error
               INTEGER(HSIZE_T) :: tsize, offset
               INTEGER(HSIZE_T) :: isize
               INTEGER(HSIZE_T) :: dsize
               INTEGER(HSIZE_T) :: csize

               offset = 0
               tsize = 0
               rank = 1

               ! Calculate datatype size
               CALL h5tget_size_f(H5T_NATIVE_CHARACTER, csize, error)
               dims(1) = size(type_ptr)
               tsize = dims(1) * 32 * csize;
               !CALCULATE_STUB

               ! Create/Expand the datatype
               ! Create the pointer string type
               CALL h5tcreate_f(H5T_STRING_F, 32*csize, string_id, &
                    error)
               CALL h5tarray_create_f(string_id, rank, dims, dtype_id, &
                  error)

            END SUBROUTINE make_type_DTYPE

            SUBROUTINE store_DTYPE(cpfile_id, &
                  type_ptr_id, type_ptr)
               INTEGER(HID_T), INTENT(IN) :: cpfile_id
               INTEGER(HID_T) :: group_id, type_id, dset_id, &
                  dspace_id
               CHARACTER(LEN=*), INTENT(IN) :: type_ptr_id
               TYPE(DTYPE), DIMENSION(:) :: type_ptr
               INTEGER error

               CALL h5gopen_f(cpfile_id, 'ptr_lists', &
                  group_id, error)


               ! Make our dataset
               CALL make_type_DTYPE(type_ptr, type_id) ! get type
               CALL h5screate_f(H5S_SCALAR_F, dspace_id, error)  ! get space
               CALL h5dcreate_f(group_id, type_ptr_id, type_id, &
                   dspace_id, dset_id, error)

               CALL write_DTYPE(cpfile_id, dset_id, type_ptr)
               !CALL write_TYPE(dset_id, type_ptr)

               CALL h5dclose_f(dset_id, error)
               CALL h5sclose_f(dspace_id, error)

               CALL h5gclose_f(group_id, error)
            END SUBROUTINE store_DTYPE

            SUBROUTINE write_DTYPE(cpfile_id, dset_id, type_ptr)
            !SUBROUTINE write_TYPE(cpfile_id, dset_id, type_ptr)
               IMPLICIT NONE
               INTEGER(HID_T), INTENT(IN) :: dset_id
               INTEGER(HID_T), INTENT(in) :: cpfile_id
               INTEGER(HID_T) :: type_id
               CHARACTER(LEN=32), DIMENSION(:), ALLOCATABLE ::&
                     pointer_addresses
               TYPE(DTYPE), DIMENSION(:), INTENT(IN) :: type_ptr
               INTEGER(HSIZE_T), DIMENSION(1) :: dims
               INTEGER i, rank, error

               CALL make_type_DTYPE(type_ptr, type_id) ! get type
               rank = 1
               dims(1) = size(type_ptr)
               ALLOCATE(pointer_addresses(dims(1)))
               DO i=1, int(dims(1))
                  pointer_addresses(i) = get_pointer(type_ptr(i)%t)
                  CALL store_type(cpfile_id, pointer_addresses(i), &
                     type_ptr(i)%t)
               ENDDO
               CALL h5dwrite_f(dset_id, type_id, pointer_addresses, &
                  dims, error)
               CALL h5tclose_f(type_id, error)
               !WRITE_STUB

            END SUBROUTINE write_DTYPE
