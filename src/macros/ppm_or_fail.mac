macro fail(message, type=ppm_err_alloc,info=info,exit_point=9999,caller=caller)
  <%= info %> = ppm_error_error
  call ppm_error(<%= type %>, &
      <%= message %>,&
      <%= caller %>, 100000 , <%= info %>)
  goto <%= exit_point %>
end macro

macro or_fail(message, type=ppm_err_alloc,info=info)
if (<%= info %>.NE.0) then
  call ppm_error(<%= type %>, &
      <%= message %>,&
      caller, 100000 , <%= info %>)
  goto 9999
end if
end macro

macro or_fail_alloc(message, type=ppm_err_alloc,info=info)
if (<%= info %>.NE.0) then
  call ppm_error(<%= type %>, &
      <%= message %>,&
      caller, 100000 , <%= info %>)
  goto 9999
end if
end macro

macro or_fail_dealloc(message, type=ppm_err_dealloc,info=info)
if (<%= info %>.NE.0) then
  call ppm_error(<%= type %>, &
      <%= message %>,&
      caller, 100000 , <%= info %>)
  goto 9999
end if
end macro

macro dealloc_pointer(p,info=info)
if (associated(<%= p %>)) deallocate(<%= p %>,stat=<%= info %>)
$or_fail_dealloc("<%= p %>")
end macro

macro dealloc_pointers(list)
<% list.to_s.split(',').each do |ptr| %>
$dealloc_pointer(<%= ptr %>)
<% end %>
end macro

macro macro_test(a)
  <%= a %>
end macro

macro check_associated(p,type=ppm_err_argument,info=info,exit_point=9999,caller=caller)
if (.NOT.associated(<%= p %>)) then
  $fail("pointer <%= p %> is not associated and should be",<%= type %>,<%= info %>,<%= exit_point %>,<%= caller %>)
endif
end macro

macro check_equal(a,b,message)
if (<%= a %> .NE. <%= b%>) then
   call write(cbuf,*) &
       & "equality check failed:",   CHAR(10),&
       & "    <%= a %> = ",<%= a %>, CHAR(10),&
       & "    <%= b %> = ",<%= b %>,&
       & <%= message %> 
   call ppm_error(ppm_err_argument,cbuf,10000, info)
endif
end macro

macro start_subroutine(name=default_name)
    REAL(KIND(1.D0))                   :: t0
    CHARACTER(LEN=ppm_char)            :: caller = <%= name %>

    !-------------------------------------------------------------------------
    !  Initialise
    !-------------------------------------------------------------------------
    CALL substart(caller,t0,info)
end macro

macro end_subroutine(exit_point=9999)
    CALL substop(caller,t0,info)
    <%= exit_point %> CONTINUE
end macro

macro start_function(name=default_name)
    CHARACTER(LEN=ppm_char)            :: caller = <%= name %>

    info = 0
end macro

macro end_function(exit_point=9999)
    <%= exit_point %> CONTINUE
end macro

macro destroy_collection_ptr(collection_pointer)
<% coll_ptr = collection_pointer %>
IF (ASSOCIATED(<%= coll_ptr %>)) THEN
    CALL <%= coll_ptr %>%destroy(info)
        $or_fail_dealloc("<%= coll_ptr %> object")
    DEALLOCATE(<%= coll_ptr %>,STAT=info)
        $or_fail_dealloc("<%= coll_ptr %> pointer")
ENDIF
end macro
