foreach macro equi_mesh(m)
modifier indices(i=nil,j=nil,k=nil)
modifier sca_fields(*sfs)
modifier vec_fields(*vfs)
modifier stencil_width(st_i=nil,st_j=nil,st_k=nil)
% scope.var :i, "INTEGER" unless i.nil?
% scope.var :j, "INTEGER" unless j.nil?
% scope.var :k, "INTEGER" unless k.nil?
% scope.var(:sbpitr, "CLASS(ppm_t_subpatch_),POINTER")
sbpitr => <%= m %>%subpatch%begin()
% unless bodies.west.nil? && bodies.east.nil? && bodies.south.nil? && bodies.north.nil? && bodies.bottom.nil? && bodies.top.nil? && bodies.interior.nil? && bodies.valid_nodes.nil?
%   scope.var(:stnclint, "INTEGER,DIMENSION(2*ppm_dim)")
% end
%
do while (associated(sbpitr))
% sfs.each do |f|
% if k.nil?
%   scope.var "#{f}_data2d".to_sym,  "real(mk), dimension(:,:), pointer", "=> null()"
    CALL sbpitr%get_field(<%= f %>_data2d, <%= f %>, info)
    IF (info.NE.0) THEN
        info = ppm_error_error
        CALL ppm_error(ppm_err_sub_failed,"<%= f%>_data2d",caller,10000,info)
        GOTO 9999
    ENDIF
%   sft = CG::Transform.new "#{f}_#{iter}", "#{f}_data2d(i,j)"
%
% else
%   scope.var "#{f}_data3d".to_sym,  "real(mk), dimension(:,:,:), pointer", "=> null()"
    CALL sbpitr%get_field(<%= f %>_data3d, <%= f %>, info)
    IF (info.NE.0) THEN
        info = ppm_error_error
        CALL ppm_error(ppm_err_sub_failed,"<%= f%>_data3d",caller,10000,info)
        GOTO 9999
    ENDIF
%   sft = CG::Transform.new "#{f}_#{iter}", "#{f}_data3d(i,j,k)"
% end
%
%   sft.transform! bodies.all, bodies.real, bodies.interior, bodies.west, bodies.east
%   sft.transform! bodies.south, bodies.north, bodies.bottom, bodies.top, bodies.valid_nodes
% end unless sfs.nil?
% vfs.each do |f|
% if k.nil?
%   scope.var "#{f}_data2d".to_sym,  "real(mk), dimension(:,:,:), pointer", "=> null()"
    CALL sbpitr%get_field(<%= f %>_data2d, <%= f %>, info)
    IF (info.NE.0) THEN
        info = ppm_error_error
        CALL ppm_error(ppm_err_sub_failed,"<%= f%>_data2d",caller,10000,info)
        GOTO 9999
    ENDIF
%   vft = CG::Transform.new "#{f}_#{iter}", "#{f}_data2d($1,i,j)"
% else
%   scope.var "#{f}_data3d".to_sym,  "real(mk), dimension(:,:,:,:), pointer", "=> null()"
    CALL sbpitr%get_field(<%= f %>_data3d, <%= f %>, info)
    IF (info.NE.0) THEN
        info = ppm_error_error
        CALL ppm_error(ppm_err_sub_failed,"<%= f%>_data3d",caller,10000,info)
        GOTO 9999
    ENDIF
%   vft = CG::Transform.new "#{f}_#{iter}", "#{f}_data3d($1,i,j,k)"
% end
%
%   vft.transform! bodies.all, bodies.real, bodies.interior, bodies.west, bodies.east
%   vft.transform! bodies.south, bodies.north, bodies.bottom, bodies.top, bodies.valid_nodes
% end unless vfs.nil?
%
% unless bodies.west.nil? && bodies.east.nil? && bodies.south.nil? && bodies.north.nil? && bodies.bottom.nil? && bodies.top.nil?
!boundaries of the array on which the full symmetric stencil can be applied
    stnclint(1) = MAX(1,               sbpitr%lo_a(1) + <%= st_i %>)
    stnclint(2) = MIN(sbpitr%nnodes(1),sbpitr%hi_a(2) - <%= st_i %>)
    stnclint(3) = MAX(1,               sbpitr%lo_a(3) + <%= st_j %>)
    stnclint(4) = MIN(sbpitr%nnodes(2),sbpitr%hi_a(4) - <%= st_j %>)
%   unless st_k.nil?
     stnclint(5) = MAX(1,               sbpitr%lo_a(5) + <%= st_k %>)
     stnclint(6) = MIN(sbpitr%nnodes(3),sbpitr%hi_a(6) - <%= st_k %>)
%   end
% end
%
% unless bodies.all.nil?
%   unless k.nil?
    do <%= k %> = sbpitr%lo_a(3), sbpitr%hi_a(3)
%   end
    do <%= j %> = sbpitr%lo_a(2), sbpitr%hi_a(2)
    do <%= i %> = sbpitr%lo_a(1), sbpitr%hi_a(1)
<%= bodies.all.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.valid_nodes.nil?
%   if k.nil?
% scope.var :incl_ghosts, "INTEGER,DIMENSION(4)"
%   else
% scope.var :incl_ghosts, "INTEGER,DIMENSION(6)"
%   end
    WHERE (sbpitr%bc.LT.0 .OR. &
                sbpitr%bc.EQ.ppm_param_bcdef_periodic)
        incl_ghosts = 1
    ELSEWHERE
        incl_ghosts = 0
    END WHERE
%   unless k.nil?
    do <%= k %> = 1 -            incl_ghosts(5)*sbpitr%ghostsize(5), &
              sbpitr%nnodes(3) + incl_ghosts(6)*sbpitr%ghostsize(6)
%   end
    do <%= j %> = 1 -            incl_ghosts(3)*sbpitr%ghostsize(3), &
              sbpitr%nnodes(2) + incl_ghosts(4)*sbpitr%ghostsize(4)
    do <%= i %> = 1 -            incl_ghosts(1)*sbpitr%ghostsize(1), &
              sbpitr%nnodes(1) + incl_ghosts(2)*sbpitr%ghostsize(2)
<%= bodies.valid_nodes.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.real.nil?
%   unless k.nil?
    do <%= k %> = 1, sbpitr%nnodes(3)
%   end
    do <%= j %> = 1, sbpitr%nnodes(2)
    do <%= i %> = 1, sbpitr%nnodes(1)
<%= bodies.real.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.interior.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.interior.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.west.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(1)-<%= st_i %>,stnclint(1)
<%= bodies.west.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
% 
% unless bodies.east.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3),stnclint(4)
    do <%= i %> = stnclint(2),stnclint(2)+<%= st_i %>
<%= bodies.east.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
%
% unless bodies.south.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(3)-<%= st_j %>,stnclint(3)
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.south.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
%
% unless bodies.north.nil?
%   unless k.nil?
    do <%= k %> = stnclint(5),stnclint(6)
%   end
    do <%= j %> = stnclint(4),stnclint(4)+<%= st_j %>
    do <%= i %> = stnclint(1),stnclint(2)
<%= bodies.north.indent 8 -%>
    end do
    end do
%   unless k.nil?
    end do
%   end
% end
    sbpitr => <%= m %>%subpatch%next()
end do
end macro
