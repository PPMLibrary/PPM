      ! Store routines for TYPE
            SUBROUTINE make_type_TYPE(dtype_id)
               IMPLICIT NONE
               INTEGER(HID_T), INTENT(OUT) :: dtype_id
               INTEGER(HID_T) :: parent_id
               INTEGER(HID_T) :: array_id
               INTEGER(HSIZE_T), DIMENSION(1) :: dims
               INTEGER rank
               INTEGER error
               INTEGER(HSIZE_T) :: tsize, offset
               INTEGER(HSIZE_T) :: isize
               INTEGER(HSIZE_T) :: dsize
               INTEGER(HSIZE_T) :: csize

               offset = 0
               tsize = 0
               rank = 1

               ! Start with the parent Type
               CALL make_type_PARENT(parent_id)
               CALL h5tcopy_f(parent_id, dtype_id, error)

               ! Calculate datatype size
               CALL h5tget_size_f(dtype_id, tsize, error) ! initial size
               !CALCULATE_STUB

               ! Create/Expand the datatype
               CALL h5tset_size_f(dtype_id, tsize, error)
               CALL h5tcreate_f(H5T_COMPOUND_F, tsize, dtype_id, error)

               ! Insert the members
               !CREATE_STUB

            END SUBROUTINE make_type_TYPE

            SUBROUTINE store_TYPE(cpfile_id, &
                  type_ptr_id, type_ptr)
               INTEGER(HID_T), INTENT(IN) :: cpfile_id
               INTEGER(HID_T) :: group_id, type_id, dset_id, &
                  dspace_id
               CHARACTER(LEN=*), INTENT(IN) :: type_ptr_id
               CLASS(TYPE), POINTER :: type_ptr
               INTEGER error

               CALL h5gopen_f(cpfile_id, 'TYPE', &
                  group_id, error)


               ! Make our dataset
               CALL make_type_TYPE(type_id) ! get type
               CALL h5screate_f(H5S_SCALAR_F, dspace_id, error)  ! get space
               CALL h5dcreate_f(group_id, type_ptr_id, type_id, &
                   dspace_id, dset_id, error)

               CALL write_TYPE(cpfile_id, dset_id, type_ptr)
               !CALL write_TYPE(dset_id, type_ptr)

               CALL h5dclose_f(dset_id, error)
               CALL h5sclose_f(dspace_id, error)

               CALL h5gclose_f(group_id, error)
            END SUBROUTINE store_TYPE

            SUBROUTINE write_TYPE(cpfile_id, dset_id, type_ptr)
            !SUBROUTINE write_TYPE(cpfile_id, dset_id, type_ptr)
               IMPLICIT NONE
               INTEGER(HID_T), INTENT(IN) :: dset_id
               INTEGER(HID_T), INTENT(in) :: cpfile_id
               CHARACTER(LEN=32) :: pointer_addr
               CLASS(TYPE), POINTER :: type_ptr
               CLASS(PARENT), POINTER :: parent

               !WRITE_STUB

               parent => type_ptr
               CALL write_PARENT(dset_id, parent)
            END SUBROUTINE write_TYPE
