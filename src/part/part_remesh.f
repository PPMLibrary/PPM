      !------------------------------------------------------------------------!
      !     Subroutine   :                 ppm_remesh
      !------------------------------------------------------------------------!
      ! Copyright (c) 2012 CSE Lab (ETH Zurich), MOSAIC Group (ETH Zurich), 
      !                    Center for Fluid Dynamics (DTU)
      !
      !
      ! This file is part of the Parallel Particle Mesh Library (PPM).
      !
      ! PPM is free software: you can redistribute it and/or modify
      ! it under the terms of the GNU Lesser General Public License 
      ! as published by the Free Software Foundation, either 
      ! version 3 of the License, or (at your option) any later 
      ! version.
      !
      ! PPM is distributed in the hope that it will be useful,
      ! but WITHOUT ANY WARRANTY; without even the implied warranty of
      ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
      ! GNU General Public License for more details.
      !
      ! You should have received a copy of the GNU General Public License
      ! and the GNU Lesser General Public License along with PPM. If not,
      ! see <http://www.gnu.org/licenses/>.
      !
      ! Parallel Particle Mesh Library (PPM)
      ! ETH Zurich
      ! CH-8092 Zurich, Switzerland
      !------------------------------------------------------------------------!

      SUBROUTINE DTYPE(part_remesh)(this,Mesh,kernel,info,p2m_bcdef,cutoff_val,cutoff_field)
      !!! This subroutine remesh the particle set.
      !!! If it has not been done already, it will call this%interp to
      !!!  carry out particle to mesh interpolation.
      !!! 
      !!! Currently 2 interpolation schemes are supported:
      !!!
      !!! * ppm_param_rmsh_kernel_bsp2
      !!! * ppm_param_rmsh_kernel_mp4
      !!!
      !!! [WARNING]
      !!! Currently, this routine will destroy all properties that are stored on the
      !!! particles but had not been generated by discretizing a field on this
      !!! particle set.
      !!! 
      !!! [TIP]
      !!! There is no need to perform a `ghost_get` before calling this routine
      !!! as the routine calls itself a `ghost_put` to the field after
      !!! interpolating from particles to the field.
      !------------------------------------------------------------------------!
      !  INCLUDES
      !------------------------------------------------------------------------!

      !------------------------------------------------------------------------!
      !  Modules
      !------------------------------------------------------------------------!
      IMPLICIT NONE

      DEFINE_MK()
      !-------------------------------------------------------------------------!
      ! Arguments
      !-------------------------------------------------------------------------!
      CLASS(DTYPE(ppm_t_particles))                   :: this
      CLASS(ppm_t_equi_mesh_)                         :: Mesh
      INTEGER                     ,     INTENT(IN   ) :: kernel
      !!! Choice of the kernel used to compute the weights.
      INTEGER                     ,     INTENT(  OUT) :: info
      !!! Returns status, 0 upon success
      INTEGER, DIMENSION(:  )     , POINTER, OPTIONAL :: p2m_bcdef
     !!! Boundary conditions used for the interpolation routines, they may be
     !!! different than the boundary conditions set in the topology.
     !!! The values in this array can be one of:
     !!!
     !!! - ppm_param_bcdef_symmetry
     !!! - ppm_param_bcdef_antisymmetry
      REAL(MK), DIMENSION(2),  OPTIONAL, INTENT(IN)   :: cutoff_val
      !!! Lower (element 1) and upper (element 2) bound of particle
      !!! strengths. Only particles with strengths in this band
      !!! will be created.
      CLASS(ppm_t_field_),    OPTIONAL, INTENT(IN)    :: cutoff_field
      !!! Field that the above cutoff values apply on (this is usually the field
      !!! that represents the strength of the particles)
     !-------------------------------------------------------------------------!
     ! Local variables
     !-------------------------------------------------------------------------!
      INTEGER                                  :: ip,ndim
      INTEGER                                  :: nb_part

      start_subroutine("ppm_remesh")

      ndim = ppm_dim


      end_subroutine()
      END SUBROUTINE DTYPE(part_remesh)

